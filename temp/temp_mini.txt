boolean CONGESTION = false;
const int SENSOR_MAX_BUFFER_SIZE = 1;
const int SENSOR_MAX_QUEUE_SIZE = 1;
const int SENSOR_MAX_PROCESSING_RATE = 1;
const int SENSOR_MAX_SENDING_RATE = 1;
const int CHANNEL_MAX_BUFFER_SIZE = 1;
const int CHANNEL_MAX_SENDING_RATE = 1;
int NUMBER_OF_PACKAGE = 1;
const int SENSOR_MIN_SENDING_RATE = 1;
const int SENSOR_MIN_PROCESSING_RATE = 1;
const int CHANEL_MIN_SENDING_RATE = 1;
int Buffer_3 = 0;
int Queue_3 = 0;
float energy_3 = 1;
int Buffer_12 = 0;
int Queue_12 = 0;
float energy_12 = 1;
int Buffer_15 = 0;
int Queue_15 = 0;
float energy_15 = 1;
int Buffer_39 = 0;
int Queue_39 = 0;
float energy_39 = 1;
int Buffer_49 = 0;
int Queue_49 = 0;
float energy_49 = 1;
int Buffer_7 = 0;
int Queue_7 = 0;
float energy_7 = 1;
int Buffer_9 = 0;
int Queue_9 = 0;
float energy_9 = 1;
int Buffer_14 = 0;
int Queue_14 = 0;
float energy_14 = 1;
int Buffer_27 = 0;
int Queue_27 = 0;
float energy_27 = 1;
int Buffer_10 = 0;
int Queue_10 = 0;
float energy_10 = 1;
int Buffer_11 = 0;
int Queue_11 = 0;
float energy_11 = 1;
int Buffer_5 = 0;
int Queue_5 = 0;
float energy_5 = 1;
int Buffer_33 = 0;
int Queue_33 = 0;
float energy_33 = 1;
int Buffer_38 = 0;
int Queue_38 = 0;
float energy_38 = 1;
int Buffer_21 = 0;
int Queue_21 = 0;
float energy_21 = 1;
int Buffer_44 = 0;
int Queue_44 = 0;
float energy_44 = 1;
int Buffer_29 = 0;
int Queue_29 = 0;
float energy_29 = 1;
int Buffer_19 = 0;
int Queue_19 = 0;
float energy_19 = 1;
int Buffer_16 = 0;
int Queue_16 = 0;
float energy_16 = 1;
int Buffer_30 = 0;
int Queue_30 = 0;
float energy_30 = 1;
int Buffer_18 = 0;
int Queue_18 = 0;
float energy_18 = 1;
int Buffer_6 = 0;
int Queue_6 = 0;
float energy_6 = 1;
int Buffer_40 = 0;
int Queue_40 = 0;
float energy_40 = 1;
int Buffer_50 = 0;
int Queue_50 = 0;
float energy_50 = 1;
int Buffer_26 = 0;
int Queue_26 = 0;
float energy_26 = 1;
int Buffer_35 = 0;
int Queue_35 = 0;
float energy_35 = 1;
int Buffer_32 = 0;
int Queue_32 = 0;
float energy_32 = 1;
int Buffer_20 = 0;
int Queue_20 = 0;
float energy_20 = 1;
int Buffer_45 = 0;
int Queue_45 = 0;
float energy_45 = 1;
int Buffer_31 = 0;
int Queue_31 = 0;
float energy_31 = 1;
int Buffer_34 = 0;
int Queue_34 = 0;
float energy_34 = 1;
int Buffer_17 = 0;
int Queue_17 = 0;
float energy_17 = 1;
int Buffer_2 = 0;
int Queue_2 = 0;
float energy_2 = 1;
int Buffer_28 = 0;
int Queue_28 = 0;
float energy_28 = 1;
int Buffer_46 = 0;
int Queue_46 = 0;
float energy_46 = 1;
int Buffer_13 = 0;
int Queue_13 = 0;
float energy_13 = 1;
int Buffer_22 = 0;
int Queue_22 = 0;
float energy_22 = 1;
int Buffer_25 = 0;
int Queue_25 = 0;
float energy_25 = 1;
int Buffer_24 = 0;
int Queue_24 = 0;
float energy_24 = 1;
int Buffer_36 = 0;
int Queue_36 = 0;
float energy_36 = 1;
int Buffer_42 = 0;
int Queue_42 = 0;
float energy_42 = 1;
int Buffer_4 = 0;
int Queue_4 = 0;
float energy_4 = 1;
int Channel_Buffer_20_14 = 0;
int Channel_Buffer_22_50 = 0;
int Channel_Buffer_18_21 = 0;
int Channel_Buffer_7_42 = 0;
int Channel_Buffer_50_28 = 0;
int Channel_Buffer_34_19 = 0;
int Channel_Buffer_27_13 = 0;
int Channel_Buffer_26_11 = 0;
int Channel_Buffer_13_29 = 0;
int Channel_Buffer_11_15 = 0;
int Channel_Buffer_3_25 = 0;
int Channel_Buffer_19_9 = 0;
int Channel_Buffer_9_49 = 0;
int Channel_Buffer_16_32 = 0;
int Channel_Buffer_25_28 = 0;
int Channel_Buffer_15_14 = 0;
int Channel_Buffer_40_22 = 0;
int Channel_Buffer_49_19 = 0;
int Channel_Buffer_45_5 = 0;
int Channel_Buffer_17_2 = 0;
int Channel_Buffer_31_15 = 0;
int Channel_Buffer_46_26 = 0;
int Channel_Buffer_29_42 = 0;
int Channel_Buffer_44_14 = 0;
int Channel_Buffer_30_13 = 0;
int Channel_Buffer_33_27 = 0;
int Channel_Buffer_32_15 = 0;
int Channel_Buffer_28_17 = 0;
int Channel_Buffer_24_34 = 0;
int Channel_Buffer_35_21 = 0;
int Channel_Buffer_2_22 = 0;
int Channel_Buffer_6_3 = 0;
int Channel_Buffer_12_17 = 0;
main {
search(CONGESTION);
}


int_send_3 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_3 >= random) {
Buffer_3 = Buffer_3 - random;
}
else {
random = Buffer_3;
Buffer_3 = 0;
}Queue_3 = Queue_3 + random;
if (Queue_3 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_3 = energy_3 - randomFloat(0.1, 0.2);
}


int_send_12 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_12 >= random) {
Buffer_12 = Buffer_12 - random;
}
else {
random = Buffer_12;
Buffer_12 = 0;
}Queue_12 = Queue_12 + random;
if (Queue_12 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_12 = energy_12 - randomFloat(0.1, 0.2);
}


int_send_15 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_15 >= random) {
Buffer_15 = Buffer_15 - random;
}
else {
random = Buffer_15;
Buffer_15 = 0;
}Queue_15 = Queue_15 + random;
if (Queue_15 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_15 = energy_15 - randomFloat(0.1, 0.2);
}


int_send_39 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_39 >= random) {
Buffer_39 = Buffer_39 - random;
}
else {
random = Buffer_39;
Buffer_39 = 0;
}Queue_39 = Queue_39 + random;
if (Queue_39 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_39 = energy_39 - randomFloat(0.1, 0.2);
}


int_send_49 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_49 >= random) {
Buffer_49 = Buffer_49 - random;
}
else {
random = Buffer_49;
Buffer_49 = 0;
}Queue_49 = Queue_49 + random;
if (Queue_49 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_49 = energy_49 - randomFloat(0.1, 0.2);
}


int_send_7 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_7 >= random) {
Buffer_7 = Buffer_7 - random;
}
else {
random = Buffer_7;
Buffer_7 = 0;
}Queue_7 = Queue_7 + random;
if (Queue_7 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_7 = energy_7 - randomFloat(0.1, 0.2);
}


int_send_9 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_9 >= random) {
Buffer_9 = Buffer_9 - random;
}
else {
random = Buffer_9;
Buffer_9 = 0;
}Queue_9 = Queue_9 + random;
if (Queue_9 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_9 = energy_9 - randomFloat(0.1, 0.2);
}


int_send_14 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_14 >= random) {
Buffer_14 = Buffer_14 - random;
}
else {
random = Buffer_14;
Buffer_14 = 0;
}Queue_14 = Queue_14 + random;
if (Queue_14 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_14 = energy_14 - randomFloat(0.1, 0.2);
}


int_send_27 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_27 >= random) {
Buffer_27 = Buffer_27 - random;
}
else {
random = Buffer_27;
Buffer_27 = 0;
}Queue_27 = Queue_27 + random;
if (Queue_27 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_27 = energy_27 - randomFloat(0.1, 0.2);
}


int_send_10 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_10 >= random) {
Buffer_10 = Buffer_10 - random;
}
else {
random = Buffer_10;
Buffer_10 = 0;
}Queue_10 = Queue_10 + random;
if (Queue_10 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_10 = energy_10 - randomFloat(0.1, 0.2);
}


int_send_11 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_11 >= random) {
Buffer_11 = Buffer_11 - random;
}
else {
random = Buffer_11;
Buffer_11 = 0;
}Queue_11 = Queue_11 + random;
if (Queue_11 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_11 = energy_11 - randomFloat(0.1, 0.2);
}


int_send_5 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_5 >= random) {
Buffer_5 = Buffer_5 - random;
}
else {
random = Buffer_5;
Buffer_5 = 0;
}Queue_5 = Queue_5 + random;
if (Queue_5 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_5 = energy_5 - randomFloat(0.1, 0.2);
}


int_send_33 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_33 >= random) {
Buffer_33 = Buffer_33 - random;
}
else {
random = Buffer_33;
Buffer_33 = 0;
}Queue_33 = Queue_33 + random;
if (Queue_33 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_33 = energy_33 - randomFloat(0.1, 0.2);
}


int_send_38 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_38 >= random) {
Buffer_38 = Buffer_38 - random;
}
else {
random = Buffer_38;
Buffer_38 = 0;
}Queue_38 = Queue_38 + random;
if (Queue_38 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_38 = energy_38 - randomFloat(0.1, 0.2);
}


int_send_21 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_21 >= random) {
Buffer_21 = Buffer_21 - random;
}
else {
random = Buffer_21;
Buffer_21 = 0;
}Queue_21 = Queue_21 + random;
if (Queue_21 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_21 = energy_21 - randomFloat(0.1, 0.2);
}


int_send_44 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_44 >= random) {
Buffer_44 = Buffer_44 - random;
}
else {
random = Buffer_44;
Buffer_44 = 0;
}Queue_44 = Queue_44 + random;
if (Queue_44 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_44 = energy_44 - randomFloat(0.1, 0.2);
}


int_send_29 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_29 >= random) {
Buffer_29 = Buffer_29 - random;
}
else {
random = Buffer_29;
Buffer_29 = 0;
}Queue_29 = Queue_29 + random;
if (Queue_29 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_29 = energy_29 - randomFloat(0.1, 0.2);
}


int_send_19 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_19 >= random) {
Buffer_19 = Buffer_19 - random;
}
else {
random = Buffer_19;
Buffer_19 = 0;
}Queue_19 = Queue_19 + random;
if (Queue_19 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_19 = energy_19 - randomFloat(0.1, 0.2);
}


int_send_16 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_16 >= random) {
Buffer_16 = Buffer_16 - random;
}
else {
random = Buffer_16;
Buffer_16 = 0;
}Queue_16 = Queue_16 + random;
if (Queue_16 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_16 = energy_16 - randomFloat(0.1, 0.2);
}


int_send_30 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_30 >= random) {
Buffer_30 = Buffer_30 - random;
}
else {
random = Buffer_30;
Buffer_30 = 0;
}Queue_30 = Queue_30 + random;
if (Queue_30 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_30 = energy_30 - randomFloat(0.1, 0.2);
}


int_send_18 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_18 >= random) {
Buffer_18 = Buffer_18 - random;
}
else {
random = Buffer_18;
Buffer_18 = 0;
}Queue_18 = Queue_18 + random;
if (Queue_18 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_18 = energy_18 - randomFloat(0.1, 0.2);
}


int_send_6 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_6 >= random) {
Buffer_6 = Buffer_6 - random;
}
else {
random = Buffer_6;
Buffer_6 = 0;
}Queue_6 = Queue_6 + random;
if (Queue_6 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_6 = energy_6 - randomFloat(0.1, 0.2);
}


int_send_40 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_40 >= random) {
Buffer_40 = Buffer_40 - random;
}
else {
random = Buffer_40;
Buffer_40 = 0;
}Queue_40 = Queue_40 + random;
if (Queue_40 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_40 = energy_40 - randomFloat(0.1, 0.2);
}


int_send_50 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_50 >= random) {
Buffer_50 = Buffer_50 - random;
}
else {
random = Buffer_50;
Buffer_50 = 0;
}Queue_50 = Queue_50 + random;
if (Queue_50 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_50 = energy_50 - randomFloat(0.1, 0.2);
}


int_send_26 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_26 >= random) {
Buffer_26 = Buffer_26 - random;
}
else {
random = Buffer_26;
Buffer_26 = 0;
}Queue_26 = Queue_26 + random;
if (Queue_26 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_26 = energy_26 - randomFloat(0.1, 0.2);
}


int_send_35 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_35 >= random) {
Buffer_35 = Buffer_35 - random;
}
else {
random = Buffer_35;
Buffer_35 = 0;
}Queue_35 = Queue_35 + random;
if (Queue_35 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_35 = energy_35 - randomFloat(0.1, 0.2);
}


int_send_32 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_32 >= random) {
Buffer_32 = Buffer_32 - random;
}
else {
random = Buffer_32;
Buffer_32 = 0;
}Queue_32 = Queue_32 + random;
if (Queue_32 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_32 = energy_32 - randomFloat(0.1, 0.2);
}


int_send_20 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_20 >= random) {
Buffer_20 = Buffer_20 - random;
}
else {
random = Buffer_20;
Buffer_20 = 0;
}Queue_20 = Queue_20 + random;
if (Queue_20 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_20 = energy_20 - randomFloat(0.1, 0.2);
}


int_send_45 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_45 >= random) {
Buffer_45 = Buffer_45 - random;
}
else {
random = Buffer_45;
Buffer_45 = 0;
}Queue_45 = Queue_45 + random;
if (Queue_45 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_45 = energy_45 - randomFloat(0.1, 0.2);
}


int_send_31 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_31 >= random) {
Buffer_31 = Buffer_31 - random;
}
else {
random = Buffer_31;
Buffer_31 = 0;
}Queue_31 = Queue_31 + random;
if (Queue_31 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_31 = energy_31 - randomFloat(0.1, 0.2);
}


int_send_34 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_34 >= random) {
Buffer_34 = Buffer_34 - random;
}
else {
random = Buffer_34;
Buffer_34 = 0;
}Queue_34 = Queue_34 + random;
if (Queue_34 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_34 = energy_34 - randomFloat(0.1, 0.2);
}


int_send_17 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_17 >= random) {
Buffer_17 = Buffer_17 - random;
}
else {
random = Buffer_17;
Buffer_17 = 0;
}Queue_17 = Queue_17 + random;
if (Queue_17 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_17 = energy_17 - randomFloat(0.1, 0.2);
}


int_send_2 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_2 >= random) {
Buffer_2 = Buffer_2 - random;
}
else {
random = Buffer_2;
Buffer_2 = 0;
}Queue_2 = Queue_2 + random;
if (Queue_2 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_2 = energy_2 - randomFloat(0.1, 0.2);
}


int_send_28 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_28 >= random) {
Buffer_28 = Buffer_28 - random;
}
else {
random = Buffer_28;
Buffer_28 = 0;
}Queue_28 = Queue_28 + random;
if (Queue_28 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_28 = energy_28 - randomFloat(0.1, 0.2);
}


int_send_46 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_46 >= random) {
Buffer_46 = Buffer_46 - random;
}
else {
random = Buffer_46;
Buffer_46 = 0;
}Queue_46 = Queue_46 + random;
if (Queue_46 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_46 = energy_46 - randomFloat(0.1, 0.2);
}


int_send_13 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_13 >= random) {
Buffer_13 = Buffer_13 - random;
}
else {
random = Buffer_13;
Buffer_13 = 0;
}Queue_13 = Queue_13 + random;
if (Queue_13 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_13 = energy_13 - randomFloat(0.1, 0.2);
}


int_send_22 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_22 >= random) {
Buffer_22 = Buffer_22 - random;
}
else {
random = Buffer_22;
Buffer_22 = 0;
}Queue_22 = Queue_22 + random;
if (Queue_22 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_22 = energy_22 - randomFloat(0.1, 0.2);
}


int_send_25 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_25 >= random) {
Buffer_25 = Buffer_25 - random;
}
else {
random = Buffer_25;
Buffer_25 = 0;
}Queue_25 = Queue_25 + random;
if (Queue_25 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_25 = energy_25 - randomFloat(0.1, 0.2);
}


int_send_24 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_24 >= random) {
Buffer_24 = Buffer_24 - random;
}
else {
random = Buffer_24;
Buffer_24 = 0;
}Queue_24 = Queue_24 + random;
if (Queue_24 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_24 = energy_24 - randomFloat(0.1, 0.2);
}


int_send_36 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_36 >= random) {
Buffer_36 = Buffer_36 - random;
}
else {
random = Buffer_36;
Buffer_36 = 0;
}Queue_36 = Queue_36 + random;
if (Queue_36 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_36 = energy_36 - randomFloat(0.1, 0.2);
}


int_send_42 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_42 >= random) {
Buffer_42 = Buffer_42 - random;
}
else {
random = Buffer_42;
Buffer_42 = 0;
}Queue_42 = Queue_42 + random;
if (Queue_42 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_42 = energy_42 - randomFloat(0.1, 0.2);
}


int_send_4 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_4 >= random) {
Buffer_4 = Buffer_4 - random;
}
else {
random = Buffer_4;
Buffer_4 = 0;
}Queue_4 = Queue_4 + random;
if (Queue_4 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_4 = energy_4 - randomFloat(0.1, 0.2);
}


Channel_recv_20_14 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_20 >= random) {
Queue_20 = Queue_20 - random;
}
else {
random = Queue_20;
Queue_20 = 0;
}Channel_Buffer_20_14 = Channel_Buffer_20_14 + random;
if (Channel_Buffer_20_14 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_20_14 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_20_14 >= random) {
Channel_Buffer_20_14 = Channel_Buffer_20_14 - random;
}
else {
random = Channel_Buffer_20_14;
Channel_Buffer_20_14 = 0;
}Buffer_14 = Buffer_14 + random;
if (Buffer_14 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_24 = Buffer_24 + random;
if (Buffer_24 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_22_50 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_22 >= random) {
Queue_22 = Queue_22 - random;
}
else {
random = Queue_22;
Queue_22 = 0;
}Channel_Buffer_22_50 = Channel_Buffer_22_50 + random;
if (Channel_Buffer_22_50 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_22_50 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_22_50 >= random) {
Channel_Buffer_22_50 = Channel_Buffer_22_50 - random;
}
else {
random = Channel_Buffer_22_50;
Channel_Buffer_22_50 = 0;
}Buffer_50 = Buffer_50 + random;
if (Buffer_50 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_6 = Buffer_6 + random;
if (Buffer_6 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_18_21 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_18 >= random) {
Queue_18 = Queue_18 - random;
}
else {
random = Queue_18;
Queue_18 = 0;
}Channel_Buffer_18_21 = Channel_Buffer_18_21 + random;
if (Channel_Buffer_18_21 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_18_21 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_18_21 >= random) {
Channel_Buffer_18_21 = Channel_Buffer_18_21 - random;
}
else {
random = Channel_Buffer_18_21;
Channel_Buffer_18_21 = 0;
}Buffer_21 = Buffer_21 + random;
if (Buffer_21 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_26 = Buffer_26 + random;
if (Buffer_26 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_7_42 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_7 >= random) {
Queue_7 = Queue_7 - random;
}
else {
random = Queue_7;
Queue_7 = 0;
}Channel_Buffer_7_42 = Channel_Buffer_7_42 + random;
if (Channel_Buffer_7_42 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_7_42 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_7_42 >= random) {
Channel_Buffer_7_42 = Channel_Buffer_7_42 - random;
}
else {
random = Channel_Buffer_7_42;
Channel_Buffer_7_42 = 0;
}Buffer_42 = Buffer_42 + random;
if (Buffer_42 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_50_28 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_50 >= random) {
Queue_50 = Queue_50 - random;
}
else {
random = Queue_50;
Queue_50 = 0;
}Channel_Buffer_50_28 = Channel_Buffer_50_28 + random;
if (Channel_Buffer_50_28 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_50_28 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_50_28 >= random) {
Channel_Buffer_50_28 = Channel_Buffer_50_28 - random;
}
else {
random = Channel_Buffer_50_28;
Channel_Buffer_50_28 = 0;
}Buffer_28 = Buffer_28 + random;
if (Buffer_28 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_19 = Buffer_19 + random;
if (Buffer_19 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_12 = Buffer_12 + random;
if (Buffer_12 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_3 = Buffer_3 + random;
if (Buffer_3 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_34_19 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_34 >= random) {
Queue_34 = Queue_34 - random;
}
else {
random = Queue_34;
Queue_34 = 0;
}Channel_Buffer_34_19 = Channel_Buffer_34_19 + random;
if (Channel_Buffer_34_19 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_34_19 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_34_19 >= random) {
Channel_Buffer_34_19 = Channel_Buffer_34_19 - random;
}
else {
random = Channel_Buffer_34_19;
Channel_Buffer_34_19 = 0;
}Buffer_19 = Buffer_19 + random;
if (Buffer_19 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_27_13 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_27 >= random) {
Queue_27 = Queue_27 - random;
}
else {
random = Queue_27;
Queue_27 = 0;
}Channel_Buffer_27_13 = Channel_Buffer_27_13 + random;
if (Channel_Buffer_27_13 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_27_13 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_27_13 >= random) {
Channel_Buffer_27_13 = Channel_Buffer_27_13 - random;
}
else {
random = Channel_Buffer_27_13;
Channel_Buffer_27_13 = 0;
}Buffer_13 = Buffer_13 + random;
if (Buffer_13 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_26_11 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_26 >= random) {
Queue_26 = Queue_26 - random;
}
else {
random = Queue_26;
Queue_26 = 0;
}Channel_Buffer_26_11 = Channel_Buffer_26_11 + random;
if (Channel_Buffer_26_11 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_26_11 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_26_11 >= random) {
Channel_Buffer_26_11 = Channel_Buffer_26_11 - random;
}
else {
random = Channel_Buffer_26_11;
Channel_Buffer_26_11 = 0;
}Buffer_11 = Buffer_11 + random;
if (Buffer_11 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_10 = Buffer_10 + random;
if (Buffer_10 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_46 = Buffer_46 + random;
if (Buffer_46 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_13_29 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_13 >= random) {
Queue_13 = Queue_13 - random;
}
else {
random = Queue_13;
Queue_13 = 0;
}Channel_Buffer_13_29 = Channel_Buffer_13_29 + random;
if (Channel_Buffer_13_29 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_13_29 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_13_29 >= random) {
Channel_Buffer_13_29 = Channel_Buffer_13_29 - random;
}
else {
random = Channel_Buffer_13_29;
Channel_Buffer_13_29 = 0;
}Buffer_29 = Buffer_29 + random;
if (Buffer_29 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_7 = Buffer_7 + random;
if (Buffer_7 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_11_15 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_11 >= random) {
Queue_11 = Queue_11 - random;
}
else {
random = Queue_11;
Queue_11 = 0;
}Channel_Buffer_11_15 = Channel_Buffer_11_15 + random;
if (Channel_Buffer_11_15 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_11_15 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_11_15 >= random) {
Channel_Buffer_11_15 = Channel_Buffer_11_15 - random;
}
else {
random = Channel_Buffer_11_15;
Channel_Buffer_11_15 = 0;
}Buffer_15 = Buffer_15 + random;
if (Buffer_15 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_3_25 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_3 >= random) {
Queue_3 = Queue_3 - random;
}
else {
random = Queue_3;
Queue_3 = 0;
}Channel_Buffer_3_25 = Channel_Buffer_3_25 + random;
if (Channel_Buffer_3_25 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_3_25 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_3_25 >= random) {
Channel_Buffer_3_25 = Channel_Buffer_3_25 - random;
}
else {
random = Channel_Buffer_3_25;
Channel_Buffer_3_25 = 0;
}Buffer_25 = Buffer_25 + random;
if (Buffer_25 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_19_9 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_19 >= random) {
Queue_19 = Queue_19 - random;
}
else {
random = Queue_19;
Queue_19 = 0;
}Channel_Buffer_19_9 = Channel_Buffer_19_9 + random;
if (Channel_Buffer_19_9 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_19_9 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_19_9 >= random) {
Channel_Buffer_19_9 = Channel_Buffer_19_9 - random;
}
else {
random = Channel_Buffer_19_9;
Channel_Buffer_19_9 = 0;
}Buffer_9 = Buffer_9 + random;
if (Buffer_9 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_9_49 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_9 >= random) {
Queue_9 = Queue_9 - random;
}
else {
random = Queue_9;
Queue_9 = 0;
}Channel_Buffer_9_49 = Channel_Buffer_9_49 + random;
if (Channel_Buffer_9_49 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_9_49 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_9_49 >= random) {
Channel_Buffer_9_49 = Channel_Buffer_9_49 - random;
}
else {
random = Channel_Buffer_9_49;
Channel_Buffer_9_49 = 0;
}Buffer_49 = Buffer_49 + random;
if (Buffer_49 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_46 = Buffer_46 + random;
if (Buffer_46 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_16_32 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_16 >= random) {
Queue_16 = Queue_16 - random;
}
else {
random = Queue_16;
Queue_16 = 0;
}Channel_Buffer_16_32 = Channel_Buffer_16_32 + random;
if (Channel_Buffer_16_32 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_16_32 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_16_32 >= random) {
Channel_Buffer_16_32 = Channel_Buffer_16_32 - random;
}
else {
random = Channel_Buffer_16_32;
Channel_Buffer_16_32 = 0;
}Buffer_32 = Buffer_32 + random;
if (Buffer_32 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_25_28 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_25 >= random) {
Queue_25 = Queue_25 - random;
}
else {
random = Queue_25;
Queue_25 = 0;
}Channel_Buffer_25_28 = Channel_Buffer_25_28 + random;
if (Channel_Buffer_25_28 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_25_28 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_25_28 >= random) {
Channel_Buffer_25_28 = Channel_Buffer_25_28 - random;
}
else {
random = Channel_Buffer_25_28;
Channel_Buffer_25_28 = 0;
}Buffer_28 = Buffer_28 + random;
if (Buffer_28 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_13 = Buffer_13 + random;
if (Buffer_13 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_15_14 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_15 >= random) {
Queue_15 = Queue_15 - random;
}
else {
random = Queue_15;
Queue_15 = 0;
}Channel_Buffer_15_14 = Channel_Buffer_15_14 + random;
if (Channel_Buffer_15_14 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_15_14 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_15_14 >= random) {
Channel_Buffer_15_14 = Channel_Buffer_15_14 - random;
}
else {
random = Channel_Buffer_15_14;
Channel_Buffer_15_14 = 0;
}Buffer_14 = Buffer_14 + random;
if (Buffer_14 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_30 = Buffer_30 + random;
if (Buffer_30 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_40_22 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_40 >= random) {
Queue_40 = Queue_40 - random;
}
else {
random = Queue_40;
Queue_40 = 0;
}Channel_Buffer_40_22 = Channel_Buffer_40_22 + random;
if (Channel_Buffer_40_22 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_40_22 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_40_22 >= random) {
Channel_Buffer_40_22 = Channel_Buffer_40_22 - random;
}
else {
random = Channel_Buffer_40_22;
Channel_Buffer_40_22 = 0;
}Buffer_22 = Buffer_22 + random;
if (Buffer_22 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_49_19 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_49 >= random) {
Queue_49 = Queue_49 - random;
}
else {
random = Queue_49;
Queue_49 = 0;
}Channel_Buffer_49_19 = Channel_Buffer_49_19 + random;
if (Channel_Buffer_49_19 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_49_19 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_49_19 >= random) {
Channel_Buffer_49_19 = Channel_Buffer_49_19 - random;
}
else {
random = Channel_Buffer_49_19;
Channel_Buffer_49_19 = 0;
}Buffer_19 = Buffer_19 + random;
if (Buffer_19 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_44 = Buffer_44 + random;
if (Buffer_44 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_29 = Buffer_29 + random;
if (Buffer_29 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_7 = Buffer_7 + random;
if (Buffer_7 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_2 = Buffer_2 + random;
if (Buffer_2 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_45_5 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_45 >= random) {
Queue_45 = Queue_45 - random;
}
else {
random = Queue_45;
Queue_45 = 0;
}Channel_Buffer_45_5 = Channel_Buffer_45_5 + random;
if (Channel_Buffer_45_5 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_45_5 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_45_5 >= random) {
Channel_Buffer_45_5 = Channel_Buffer_45_5 - random;
}
else {
random = Channel_Buffer_45_5;
Channel_Buffer_45_5 = 0;
}Buffer_5 = Buffer_5 + random;
if (Buffer_5 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_17_2 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_17 >= random) {
Queue_17 = Queue_17 - random;
}
else {
random = Queue_17;
Queue_17 = 0;
}Channel_Buffer_17_2 = Channel_Buffer_17_2 + random;
if (Channel_Buffer_17_2 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_17_2 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_17_2 >= random) {
Channel_Buffer_17_2 = Channel_Buffer_17_2 - random;
}
else {
random = Channel_Buffer_17_2;
Channel_Buffer_17_2 = 0;
}Buffer_2 = Buffer_2 + random;
if (Buffer_2 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_40 = Buffer_40 + random;
if (Buffer_40 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_31_15 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_31 >= random) {
Queue_31 = Queue_31 - random;
}
else {
random = Queue_31;
Queue_31 = 0;
}Channel_Buffer_31_15 = Channel_Buffer_31_15 + random;
if (Channel_Buffer_31_15 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_31_15 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_31_15 >= random) {
Channel_Buffer_31_15 = Channel_Buffer_31_15 - random;
}
else {
random = Channel_Buffer_31_15;
Channel_Buffer_31_15 = 0;
}Buffer_15 = Buffer_15 + random;
if (Buffer_15 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_50 = Buffer_50 + random;
if (Buffer_50 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_46_26 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_46 >= random) {
Queue_46 = Queue_46 - random;
}
else {
random = Queue_46;
Queue_46 = 0;
}Channel_Buffer_46_26 = Channel_Buffer_46_26 + random;
if (Channel_Buffer_46_26 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_46_26 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_46_26 >= random) {
Channel_Buffer_46_26 = Channel_Buffer_46_26 - random;
}
else {
random = Channel_Buffer_46_26;
Channel_Buffer_46_26 = 0;
}Buffer_26 = Buffer_26 + random;
if (Buffer_26 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_12 = Buffer_12 + random;
if (Buffer_12 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_29_42 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_29 >= random) {
Queue_29 = Queue_29 - random;
}
else {
random = Queue_29;
Queue_29 = 0;
}Channel_Buffer_29_42 = Channel_Buffer_29_42 + random;
if (Channel_Buffer_29_42 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_29_42 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_29_42 >= random) {
Channel_Buffer_29_42 = Channel_Buffer_29_42 - random;
}
else {
random = Channel_Buffer_29_42;
Channel_Buffer_29_42 = 0;
}Buffer_42 = Buffer_42 + random;
if (Buffer_42 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_13 = Buffer_13 + random;
if (Buffer_13 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_44_14 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_44 >= random) {
Queue_44 = Queue_44 - random;
}
else {
random = Queue_44;
Queue_44 = 0;
}Channel_Buffer_44_14 = Channel_Buffer_44_14 + random;
if (Channel_Buffer_44_14 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_44_14 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_44_14 >= random) {
Channel_Buffer_44_14 = Channel_Buffer_44_14 - random;
}
else {
random = Channel_Buffer_44_14;
Channel_Buffer_44_14 = 0;
}Buffer_14 = Buffer_14 + random;
if (Buffer_14 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_30_13 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_30 >= random) {
Queue_30 = Queue_30 - random;
}
else {
random = Queue_30;
Queue_30 = 0;
}Channel_Buffer_30_13 = Channel_Buffer_30_13 + random;
if (Channel_Buffer_30_13 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_30_13 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_30_13 >= random) {
Channel_Buffer_30_13 = Channel_Buffer_30_13 - random;
}
else {
random = Channel_Buffer_30_13;
Channel_Buffer_30_13 = 0;
}Buffer_13 = Buffer_13 + random;
if (Buffer_13 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_33_27 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_33 >= random) {
Queue_33 = Queue_33 - random;
}
else {
random = Queue_33;
Queue_33 = 0;
}Channel_Buffer_33_27 = Channel_Buffer_33_27 + random;
if (Channel_Buffer_33_27 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_33_27 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_33_27 >= random) {
Channel_Buffer_33_27 = Channel_Buffer_33_27 - random;
}
else {
random = Channel_Buffer_33_27;
Channel_Buffer_33_27 = 0;
}Buffer_27 = Buffer_27 + random;
if (Buffer_27 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_32_15 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_32 >= random) {
Queue_32 = Queue_32 - random;
}
else {
random = Queue_32;
Queue_32 = 0;
}Channel_Buffer_32_15 = Channel_Buffer_32_15 + random;
if (Channel_Buffer_32_15 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_32_15 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_32_15 >= random) {
Channel_Buffer_32_15 = Channel_Buffer_32_15 - random;
}
else {
random = Channel_Buffer_32_15;
Channel_Buffer_32_15 = 0;
}Buffer_15 = Buffer_15 + random;
if (Buffer_15 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_5 = Buffer_5 + random;
if (Buffer_5 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_28_17 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_28 >= random) {
Queue_28 = Queue_28 - random;
}
else {
random = Queue_28;
Queue_28 = 0;
}Channel_Buffer_28_17 = Channel_Buffer_28_17 + random;
if (Channel_Buffer_28_17 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_28_17 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_28_17 >= random) {
Channel_Buffer_28_17 = Channel_Buffer_28_17 - random;
}
else {
random = Channel_Buffer_28_17;
Channel_Buffer_28_17 = 0;
}Buffer_17 = Buffer_17 + random;
if (Buffer_17 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_24_34 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_24 >= random) {
Queue_24 = Queue_24 - random;
}
else {
random = Queue_24;
Queue_24 = 0;
}Channel_Buffer_24_34 = Channel_Buffer_24_34 + random;
if (Channel_Buffer_24_34 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_24_34 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_24_34 >= random) {
Channel_Buffer_24_34 = Channel_Buffer_24_34 - random;
}
else {
random = Channel_Buffer_24_34;
Channel_Buffer_24_34 = 0;
}Buffer_34 = Buffer_34 + random;
if (Buffer_34 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_15 = Buffer_15 + random;
if (Buffer_15 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_35_21 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_35 >= random) {
Queue_35 = Queue_35 - random;
}
else {
random = Queue_35;
Queue_35 = 0;
}Channel_Buffer_35_21 = Channel_Buffer_35_21 + random;
if (Channel_Buffer_35_21 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_35_21 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_35_21 >= random) {
Channel_Buffer_35_21 = Channel_Buffer_35_21 - random;
}
else {
random = Channel_Buffer_35_21;
Channel_Buffer_35_21 = 0;
}Buffer_21 = Buffer_21 + random;
if (Buffer_21 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_2_22 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_2 >= random) {
Queue_2 = Queue_2 - random;
}
else {
random = Queue_2;
Queue_2 = 0;
}Channel_Buffer_2_22 = Channel_Buffer_2_22 + random;
if (Channel_Buffer_2_22 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_2_22 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_2_22 >= random) {
Channel_Buffer_2_22 = Channel_Buffer_2_22 - random;
}
else {
random = Channel_Buffer_2_22;
Channel_Buffer_2_22 = 0;
}Buffer_22 = Buffer_22 + random;
if (Buffer_22 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_6_3 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_6 >= random) {
Queue_6 = Queue_6 - random;
}
else {
random = Queue_6;
Queue_6 = 0;
}Channel_Buffer_6_3 = Channel_Buffer_6_3 + random;
if (Channel_Buffer_6_3 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_6_3 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_6_3 >= random) {
Channel_Buffer_6_3 = Channel_Buffer_6_3 - random;
}
else {
random = Channel_Buffer_6_3;
Channel_Buffer_6_3 = 0;
}Buffer_3 = Buffer_3 + random;
if (Buffer_3 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_36 = Buffer_36 + random;
if (Buffer_36 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_12_17 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_12 >= random) {
Queue_12 = Queue_12 - random;
}
else {
random = Queue_12;
Queue_12 = 0;
}Channel_Buffer_12_17 = Channel_Buffer_12_17 + random;
if (Channel_Buffer_12_17 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_12_17 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_12_17 >= random) {
Channel_Buffer_12_17 = Channel_Buffer_12_17 - random;
}
else {
random = Channel_Buffer_12_17;
Channel_Buffer_12_17 = 0;
}Buffer_17 = Buffer_17 + random;
if (Buffer_17 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


